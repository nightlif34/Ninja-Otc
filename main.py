import os
import logging
import string
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from database import Database

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = Database()

AWAITING_TON_WALLET, AWAITING_BANK_CARD = range(2)
AWAITING_DEAL_AMOUNT, AWAITING_DEAL_DESCRIPTION = range(2, 4)

def generate_deal_id(length=8):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏", callback_data="manage_payment")],
        [InlineKeyboardButton("üí∏ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton("üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language")],
        [InlineKeyboardButton("üß† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db.create_or_update_user(user.id, user.username)
    
    if context.args and len(context.args) > 0:
        deal_id = context.args[0]
        await handle_deal_join(update, context, deal_id)
        return
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ninja OTC ‚Äì –Ω–∞–¥—ë–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç! üíº\n"
        "–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!\n"
        "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
        "‚öôÔ∏è –ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:\n"
        "üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n"
        "üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
        "üîπ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_menu_keyboard())

async def handle_deal_join(update: Update, context: ContextTypes.DEFAULT_TYPE, deal_id: str):
    deal = db.get_deal(deal_id)
    
    if not deal:
        await update.message.reply_text("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    buyer = update.effective_user
    db.create_or_update_user(buyer.id, buyer.username)
    
    if buyer.id == deal['seller_id']:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ.")
        return
    
    if deal['buyer_id'] is not None and deal['buyer_id'] != buyer.id:
        await update.message.reply_text("‚ùå –ö —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –¥—Ä—É–≥–æ–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.")
        return
    
    if deal['buyer_id'] is None:
        db.set_deal_buyer(deal_id, buyer.id)
    
    seller = db.get_user(deal['seller_id'])
    seller_username = f"@{seller['username']}" if seller['username'] else f"ID {seller['user_id']}"
    
    buyer_user = db.get_user(buyer.id)
    buyer_deals = buyer_user['successful_deals'] if buyer_user else 0
    
    deal_info = (
        f"üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #{deal_id}\n"
        f"üë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ.\n"
        f"üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username} (ID {deal['seller_id']})\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {seller['successful_deals']}\n"
        f"‚Ä¢ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {deal['description']}\n"
        f"üè¶ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: {deal['payment_address']}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {deal['amount']} {deal['payment_type']}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–º–µ–º–æ): `{deal_id}` (–º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n"
        f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–µ–º–æ) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!"
    )
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_id}")]]
    
    await update.message.reply_text(deal_info, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    buyer_username = f"@{buyer.username}" if buyer.username else f"ID {buyer.id}"
    seller_notification = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {buyer_username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ #{deal_id}\n"
        f"- –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {buyer_deals}\n"
        f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≤–µ–ª–∏ –¥–∏–∞–ª–æ–≥ —Ä–∞–Ω–µ–µ! "
        f"–ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!"
    )
    
    try:
        await context.bot.send_message(chat_id=deal['seller_id'], text=seller_notification)
    except Exception as e:
        logger.error(f"Failed to notify seller: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "manage_payment":
        await show_payment_management(update, context)
    elif query.data == "create_deal":
        await show_deal_creation(update, context)
    elif query.data == "change_language":
        await show_language_change(update, context)
    elif query.data == "support":
        await show_support(update, context)
    elif query.data == "add_ton_wallet":
        await request_ton_wallet(update, context)
    elif query.data == "add_bank_card":
        await request_bank_card(update, context)
    elif query.data.startswith("deal_type_"):
        await handle_deal_type_selection(update, context)
    elif query.data.startswith("confirm_payment_"):
        await handle_payment_confirmation_button(update, context)
    elif query.data.startswith("confirm_receipt_"):
        await handle_receipt_confirmation(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ninja OTC ‚Äì –Ω–∞–¥—ë–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç! üíº\n"
        "–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ!\n"
        "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
        "‚öôÔ∏è –ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:\n"
        "üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n"
        "üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
        "üîπ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ"
    )
    
    await query.edit_message_text(welcome_text, reply_markup=get_main_menu_keyboard())

async def show_payment_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = db.get_user(query.from_user.id)
    
    ton_wallet = user['ton_wallet'] if user and user['ton_wallet'] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    bank_card = user['bank_card'] if user and user['bank_card'] else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    
    text = (
        "üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n"
        f"TON-–∫–æ—à–µ–ª—ë–∫: {ton_wallet}\n"
        f"–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: {bank_card}"
    )
    
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å TON-–∫–æ—à–µ–ª—ë–∫", callback_data="add_ton_wallet")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="add_bank_card")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def request_ton_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['awaiting'] = 'ton_wallet'
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª—ë–∫:",
        reply_markup=get_back_button()
    )

async def request_bank_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data['awaiting'] = 'bank_card'
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É:",
        reply_markup=get_back_button()
    )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if 'awaiting' in context.user_data:
        awaiting_type = context.user_data['awaiting']
        
        if awaiting_type == 'ton_wallet':
            db.update_user_payment_details(user_id, ton_wallet=text)
            await update.message.reply_text(
                "‚úÖ TON-–∫–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
                reply_markup=get_back_button()
            )
            del context.user_data['awaiting']
        
        elif awaiting_type == 'bank_card':
            db.update_user_payment_details(user_id, bank_card=text)
            await update.message.reply_text(
                "‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=get_back_button()
            )
            del context.user_data['awaiting']
        
        elif awaiting_type == 'deal_amount':
            context.user_data['deal_amount'] = text
            context.user_data['awaiting'] = 'deal_description'
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/–ø–æ–¥–∞—Ä–∫–∞:",
                reply_markup=get_back_button()
            )
        
        elif awaiting_type == 'deal_description':
            description = text
            amount = context.user_data.get('deal_amount')
            deal_type = context.user_data.get('deal_type')
            
            if not amount or not description:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_back_button()
                )
                del context.user_data['awaiting']
                return
            
            user = db.get_user(user_id)
            
            if deal_type == 'ton':
                payment_address = user['ton_wallet'] if user and user['ton_wallet'] else None
                payment_type = "TON"
            elif deal_type == 'card':
                payment_address = user['bank_card'] if user and user['bank_card'] else None
                payment_type = "RUB"
            elif deal_type == 'stars':
                payment_address = user['ton_wallet'] if user and user['ton_wallet'] else None
                payment_type = "Stars"
            else:
                payment_address = None
                payment_type = "Unknown"
            
            if not payment_address:
                await update.message.reply_text(
                    f"‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏'.",
                    reply_markup=get_back_button()
                )
                del context.user_data['awaiting']
                return
            
            deal_id = generate_deal_id()
            max_retries = 5
            created = False
            
            for _ in range(max_retries):
                if db.create_deal(deal_id, user_id, amount, description, payment_type, payment_address):
                    created = True
                    break
                deal_id = generate_deal_id()
            
            if not created:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_button()
                )
                del context.user_data['awaiting']
                return
            
            deal_link = f"https://t.me/NinjaOTCRobot?start={deal_id}"
            
            await update.message.reply_text(
                f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"ID —Å–¥–µ–ª–∫–∏: #{deal_id}\n"
                f"–¢–∏–ø: {payment_type}\n"
                f"–°—É–º–º–∞: {amount}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n{deal_link}",
                reply_markup=get_back_button()
            )
            
            del context.user_data['awaiting']
            del context.user_data['deal_amount']
            del context.user_data['deal_type']

async def show_deal_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    keyboard = [
        [InlineKeyboardButton("–ù–∞ TON-–∫–æ—à–µ–ª—ë–∫", callback_data="deal_type_ton")],
        [InlineKeyboardButton("–ù–∞ –∫–∞—Ä—Ç—É", callback_data="deal_type_card")],
        [InlineKeyboardButton("–ù–∞ Stars", callback_data="deal_type_stars")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    await query.edit_message_text(
        "üí∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_deal_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    deal_type = query.data.replace("deal_type_", "")
    
    context.user_data['deal_type'] = deal_type
    context.user_data['awaiting'] = 'deal_amount'
    
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_back_button()
    )

async def show_language_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        "üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞\n\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.",
        reply_markup=get_back_button()
    )

async def show_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.edit_message_text(
        "üß† –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @SupCryptOtcRobot",
        reply_markup=get_back_button()
    )

async def handle_payment_confirmation_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

async def handle_receipt_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    deal_id = query.data.replace("confirm_receipt_", "")
    
    deal = db.get_deal(deal_id)
    if not deal:
        await query.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    if deal['buyer_id'] != query.from_user.id:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", show_alert=True)
        return
    
    if deal['status'] != 'payment_confirmed':
        await query.answer("‚ùå –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
        return
    
    db.complete_deal(deal_id)
    
    await query.edit_message_text(
        f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –°–¥–µ–ª–∫–∞ #{deal_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    )
    
    try:
        await context.bot.send_message(
            chat_id=deal['seller_id'],
            text=f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        )
    except Exception as e:
        logger.error(f"Failed to notify seller: {e}")

async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not db.is_admin_or_higher(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy <deal_id>")
        return
    
    deal_id = context.args[0]
    deal = db.get_deal(deal_id)
    
    if not deal:
        await update.message.reply_text(f"‚ùå –°–¥–µ–ª–∫–∞ #{deal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    db.confirm_payment(deal_id)
    
    await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    
    try:
        buyer_id = deal['buyer_id']
        await context.bot.send_message(
            chat_id=deal['seller_id'],
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
        )
        
        if buyer_id:
            keyboard = [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", callback_data=f"confirm_receipt_{deal_id}")]]
            await context.bot.send_message(
                chat_id=buyer_id,
                text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"Failed to send notifications: {e}")

async def add_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not db.is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add admin <user_id>")
        return
    
    if context.args[0] != "admin":
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add admin <user_id>")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add admin <user_id>")
        return
    
    try:
        admin_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    if db.add_admin(admin_id, user_id):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def del_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not db.is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del admin <user_id>")
        return
    
    if context.args[0] != "admin":
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del admin <user_id>")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del admin <user_id>")
        return
    
    try:
        admin_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    if db.is_owner(admin_id):
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    
    if db.remove_admin(admin_id):
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def set_my_deals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not db.is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫.")
        return
    
    if not context.args or len(context.args) < 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_my_deals <—á–∏—Å–ª–æ>")
        return
    
    try:
        count = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    if count < 0:
        await update.message.reply_text("‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        return
    
    db.create_or_update_user(user_id, update.effective_user.username)
    
    if db.set_user_successful_deals(user_id, count):
        await update.message.reply_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {count}")
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def show_deals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not db.is_owner(user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏.")
        return
    
    deals = db.get_all_deals()
    
    if not deals:
        await update.message.reply_text("üìã –°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    
    text = "üìã –í—Å–µ —Å–¥–µ–ª–∫–∏:\n\n"
    
    for deal in deals[:20]:
        seller = db.get_user(deal['seller_id'])
        seller_username = f"@{seller['username']}" if seller and seller['username'] else f"ID {deal['seller_id']}"
        
        buyer_username = "–Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è"
        if deal['buyer_id']:
            buyer = db.get_user(deal['buyer_id'])
            buyer_username = f"@{buyer['username']}" if buyer and buyer['username'] else f"ID {deal['buyer_id']}"
        
        status_map = {
            'pending': '–æ–∂–∏–¥–∞–Ω–∏–µ',
            'payment_confirmed': '–æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'completed': '–∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
        status = status_map.get(deal['status'], deal['status'])
        
        text += f"–°–¥–µ–ª–∫–∞ #{deal['deal_id']}\n"
        text += f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n"
        text += f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}\n"
        text += f"–°—É–º–º–∞: {deal['amount']} {deal['payment_type']}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    if len(deals) > 20:
        text += f"... –∏ –µ—â—ë {len(deals) - 20} —Å–¥–µ–ª–æ–∫"
    
    await update.message.reply_text(text)

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set!")
        print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ –≤ Secrets.")
        return
    
    application = Application.builder().token(token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("buy", buy_command))
    application.add_handler(CommandHandler("add", add_admin_command))
    application.add_handler(CommandHandler("del", del_admin_command))
    application.add_handler(CommandHandler("set_my_deals", set_my_deals_command))
    application.add_handler(CommandHandler("show_deals", show_deals_command))
    
    application.add_handler(CallbackQueryHandler(button_handler))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    logger.info("Bot started successfully!")
    print("‚úÖ –ë–æ—Ç Ninja OTC –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
